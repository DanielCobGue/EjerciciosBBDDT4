SET SERVEROUTPUT ON;
DECLARE
    vCODIGO NUMBER:=1;
    vNUMALUMNO NUMBER;
    vAPROBADO NUMBER;
    vPORCENTAJE NUMBER;
BEGIN
    --SELECT COUNT(*) INTO NUMALUMNO FROM MATRICULA WHERE vCODIGO=CODASIG;
    --SELECT COUNT(*) INTO vAPROBADO FROM MATRICULA WHERE vCODIGO=CODASIG AND NOTA>=5;
    
    vPORCENTAJE:=60;
    
    IF vPORCENTAJE>85 THEN
        DBMS_OUTPUT.PUT_LINE('La evaluación de la asignatura con código 1 tiene muy buenos resultados.');
    ELSIF vPORCENTAJE>70 THEN
        DBMS_OUTPUT.PUT_LINE('La evaluación de la asignatura con código 1 no tiene malos resultados.');
    ELSIF (vPORCENTAJE BETWEEN 50 AND 70) THEN
        DBMS_OUTPUT.PUT_LINE('La evaluación de la asignatura con código 1 podría estar mejor.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('La evaluación de la asignatura con código 1 tiene malos resultados.');
    END IF;
END;

ACCEPT vENTRADA PROMPT 'INTRODUZCA UN VALOR NUMERICO';
DECLARE
vNOTA NUMBER:='&vENTRADA';
BEGIN
     DBMS_OUTPUT.PUT_LINE(vNOTA);
    IF vNOTA BETWEEN 9 AND 10 THEN
        DBMS_OUTPUT.PUT_LINE('SOBRESALIENTE');
    ELSIF vNOTA BETWEEN 7 AND 9 THEN
        DBMS_OUTPUT.PUT_LINE('NOTABLE');
    ELSIF vNOTA BETWEEN 6 AND 7 THEN
        DBMS_OUTPUT.PUT_LINE('BIEN');
    ELSIF vNOTA BETWEEN 5 AND 6 THEN
        DBMS_OUTPUT.PUT_LINE('APROBADO');
    ELSE
        DBMS_OUTPUT.PUT_LINE('INSUFICIENTE');
    END IF;
END;

CREATE TABLE tblPrueba(id NUMBER(4) PRIMARY KEY);
UNDEFINE vn;
DECLARE
    vContador NUMBER := 6;
    vn NUMBER;
BEGIN
    vn:=&n;
    LOOP
        INSERT INTO tblPrueba VALUES(vContador);
        vContador := vContador+1;
        EXIT WHEN vcontador>vn;
    END LOOP;
END;

DELETE TBLPRUEBA;
--LOOP
DECLARE
    vContador NUMBER := 0;
    vn NUMBER:=1;
BEGIN
    LOOP
        IF MOD(vn,3)=0 THEN
            vContador := vContador+1;
        END IF;
            vn:=vn+1;
        EXIT WHEN vn=100;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(vContador);
END;
--FOR
DECLARE
    vContador NUMBER := 0;
    vn NUMBER:=1;
BEGIN
    FOR vn IN 1.. &F LOOP
        IF MOD(vn,3)=0 THEN
            vContador := vContador+1;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(vContador);
END;
--WHILE
DECLARE
    vContador NUMBER := 0;
    vn NUMBER:=1;
BEGIN
    WHILE vn<=100 LOOP
        IF MOD(vn,3)=0 THEN
            vContador := vContador+1;
        END IF;
            vn:=vn+1;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(vContador);
END;
--6.11
DECLARE
    Contador NUMBER:=1;
BEGIN
    LOOP
        Contador:=Contador;
        EXIT WHEN Contador<0;
        DBMS_OUTPUT.PUT_LINE('Valor de contador'||Contador);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('El bucle ha finalizado porque contador vale '||Contador);
END;
--SOLUCION
DECLARE
    Contador NUMBER:=1;
    Vueltas NUMBER:=0;
BEGIN
    FOR Contador IN 1.. &N LOOP
        Vueltas:=Vueltas+1;
        DBMS_OUTPUT.PUT_LINE('Valor de contador '||Contador);
        
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('El bucle ha finalizado porque contador vale '||Vueltas);
END;
--6.13
--FOR
DECLARE
    Contador NUMBER:=1;
    Numero NUMBER;
    Resultado NUMBER;
BEGIN
    Numero:=&Numero;
    FOR Contador IN 1.. 10 LOOP
        Resultado:=(Numero*Contador);
        DBMS_OUTPUT.PUT_LINE(Contador||' * '||Numero||'='||Resultado);
        
    END LOOP;
END;
--WHILE
DECLARE
    Contador NUMBER:=1;
    Numero NUMBER;
    Resultado NUMBER;
BEGIN
    Numero:=&Numero;
    WHILE Contador<=10 LOOP
        Resultado:=(Numero*Contador);
        DBMS_OUTPUT.PUT_LINE(Contador||' * '||Numero||'='||Resultado);
        Contador:=Contador+1;
    END LOOP;
END;

----------------------------------------------

--EJERCICIO

DECLARE
    TYPE tTASA_IMPUESTOS IS TABLE OF NUMBER(4,2) INDEX BY BINARY_INTEGER;
    vtIMPUESTOS tTASA_IMPUESTOS;
    vCONTADOR NUMBER;
BEGIN
    vtIMPUESTOS(0):=20.30;
    vtIMPUESTOS(1):=34.90;
    vtIMPUESTOS(2):=40.00;
    vtIMPUESTOS(3):=30.21;
    FOR vCONTADOR IN 0.. 3 LOOP
    DBMS_OUTPUT.PUT_LINE('IMPUESTO: '||vtIMPUESTOS(vCONTADOR));
    END LOOP;
END;

--EJERCICIO 6.17

DECLARE
    TYPE V1 IS VARRAY(10) OF VARCHAR2(10);
    NUMHIJOS V1:=V1('EVA','LUCIA','JUAN');
    CONTADOR NUMBER:=1;
BEGIN
    NUMHIJOS.EXTEND(7);
    NUMHIJOS(9):='DAVID';
    FOR CONTADOR IN 1.. 10 LOOP
        DBMS_OUTPUT.PUT_LINE(NUMHIJOS(CONTADOR));
        
    END LOOP;
END;

--EJERCICIO 6.18

DECLARE
    VVOCAL NUMBER(1);
    CONSONANTE NUMBER(2);
    TYPE V1 IS VARRAY(5) OF VARCHAR2(1);
    VARRAYVOCALES V1:=V1('A','E','I','O','U');
    TYPE V2 IS VARRAY(21) OF VARCHAR2(1);
    VARRAYCONSONANTES V2:=V2('B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z');
    RESULTADO VARCHAR2(30);
    NUMERO NUMBER(2);
    CONTADOR NUMBER:=1;
BEGIN
    LOOP
        NUMERO:=&NUMERO;
        EXIT WHEN NUMERO<=15 AND NUMERO>=1;
    END LOOP;
    WHILE CONTADOR<=NUMERO LOOP
        VVOCAL:=DBMS_RANDOM.VALUE(1,5);
        CONSONANTE:=DBMS_RANDOM.VALUE(1,21);
        CONTADOR:=CONTADOR+1;
        RESULTADO:=RESULTADO||VARRAYVOCALES(VVOCAL)||VARRAYCONSONANTES(CONSONANTE); 
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(RESULTADO);
END;

--EJERCICIO 6.19

DECLARE
    TYPE tVALORES IS TABLE OF VARCHAR2(100) INDEX BY VARCHAR2(50);
    vVALORES tVALORES;
BEGIN
    vVALORES("ZZZ"):="HOLA";
END;

--EjercicioSiete--
DECLARE
    TYPE rINFORMACION IS RECORD(
    nombreP PRODUCTOS.NOMBRE%TYPE,
    nombreF FABRICANTES.NOMBRE%TYPE,
    categoria VARCHAR(40));
    vCONTAR NUMBER:=0;
    vPRIMERALETRA CHAR;
    vINFORMACION rINFORMACION;
BEGIN
    vINFORMACION.nombreP:=('IMPRESORA PROFESIONAL 769XM');
    vINFORMACION.nombreF:=('ASUS');
    vINFORMACION.categoria:=('Tarjetas de red');
    DBMS_OUTPUT.PUT_LINE(vINFORMACION.nombreP||' + '||vINFORMACION.nombreF||' + '||vINFORMACION.categoria);
    
    SELECT COUNT(*)INTO vCONTAR FROM FABRICANTES F, PRODUCTOS P WHERE F.ID=P.ID_FABRICANTE AND UPPER (F.NOMBRE)=vINFORMACION.nombreF;
    DBMS_OUTPUT.PUT_LINE('EL CONTEO DE ASUS ES DE '||vCONTAR);
    
END;

--Ejercicio 22

CREATE OR REPLACE FUNCTION MOSTRAR(NUMERO NUMBER)RETURN VARCHAR2 IS
    V_NUM NUMBER:=NUMERO;
    V_ID NUMBER(3,0);
    V_NOMBRE VARCHAR2(100 BYTE);
    V_PRECIO NUMBER(6,2);
    V_ID_FABRICANTE NUMBER(3,0);
    V_RESULTADO VARCHAR(200);
BEGIN
    SELECT * INTO V_ID, V_NOMBRE, V_PRECIO, V_ID_FABRICANTE FROM PRODUCTOS WHERE ID=V_NUM;
    V_RESULTADO:=V_ID||' '||V_NOMBRE||' '||V_PRECIO||' '||V_ID_FABRICANTE;
    DBMS_OUTPUT.PUT_LINE(V_RESULTADO);
    RETURN V_RESULTADO;
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR DE PROCEDIMIENTO');
END;
SELECT MOSTRAR(1) FROM DUAL;

--EJERCICIO 23
CREATE OR REPLACE PROCEDURE ESPACIOS(CADENA IN VARCHAR2) IS
    CARACTERES VARCHAR2(200);
    
BEGIN
    CARACTERES:=REPLACE(CADENA,' ','');
    DBMS_OUTPUT.PUT_LINE(CARACTERES);
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR DE PROCEDIMIENTO');
END;

CALL ESPACIOS('HOLA QUE TAL O A');

--EJERCICIO 24

CREATE OR REPLACE PROCEDURE VOCALES(CADENA IN VARCHAR2) IS
    CARACTERES VARCHAR2(200):=CADENA;
    VOCALES NUMBER(2):=0;
BEGIN
    FOR i IN 0.. LENGTH(CARACTERES) LOOP
        IF i.VOCAL THEN
            VOCALES:=VOCALES+1;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(VOCALES);
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR DE PROCEDIMIENTO');
END;

CALL ESPACIOS('HOLA QUE TAL O A');

--EjercicioCoplementario--

--EJERCICIO 6.20
DECLARE
    vMATRICULA AUTOBUS.MATRICULA%TYPE;
    CURSOR cMATRICULAS IS
    SELECT MATRICULA FROM AUTOBUS;
BEGIN
    OPEN cMATRICULAS;
    LOOP
        FETCH cMATRICULAS INTO vMATRICULA;
        IF cMATRICULAS%FOUND THEN
        DBMS_OUTPUT.PUT_LINE(vMATRICULA);
        END IF;
        EXIT WHEN cMATRICULAS%NOTFOUND;
    END LOOP;
END;
-----------
DECLARE
    vMATRICULA AUTOBUS.MATRICULA%TYPE;
    CURSOR cMATRICULAS IS
    SELECT MATRICULA FROM AUTOBUS;
BEGIN
    OPEN cMATRICULAS;
    FETCH cMATRICULAS INTO vMATRICULA;
    WHILE cMATRICULAS%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(vMATRICULA);
        FETCH cMATRICULAS INTO vMATRICULA;
    END LOOP;
END;
----------
DECLARE
    vMATRICULA AUTOBUS.MATRICULA%TYPE;
    CURSOR cMATRICULAS IS
    SELECT MATRICULA FROM AUTOBUS;
BEGIN
    FOR Hola in cMATRICULAS LOOP
        DBMS_OUTPUT.PUT_LINE(Hola.MATRICULA);
    END LOOP;
END;
----------
DECLARE
    vDNI CONDUCTOR.DNI%TYPE:='57927673L';
BEGIN
    DELETE FROM CONDUCTOR WHERE DNI=vDni;
END;
---------
CREATE OR REPLACE PROCEDURE BORRAR(i_dni IN VARCHAR2) IS
    vDni conductor.ID%TYPE:=N;
BEGIN
    DELETE FROM CONDUCTOR WHERE DNI=vDni;
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR DE PROCEDIMIENTO');
END;

CALL BORRAR('45204004G');

--------26/04/2024
CREATE OR REPLACE TRIGGER NUEVOSVIAJES
BEFORE INSERT ON VIAJES
FOR EACH ROW
DECLARE

BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.DNI_CONDUCTOR||:NEW.MATRICULA_AUTOBUS||:NEW.FECHA||:NEW.FECHA||:NEW.TIPO||:NEW.DESTINO);
END;
INSERT INTO VIAJES(DNI_CONDUCTOR, MATRICULA_AUTOBUS, FECHA, TIPO, DESTINO) VALUES ('93606885J', '4598DLM','04/08/05','PRIVADO','SORIA');
ALTER TRIGGER NUEVOSVIAJES DISABLE;
-----
CREATE OR REPLACE TRIGGER VALIDARDESTINO
BEFORE DELETE OR UPDATE OF DESTINO ON VIAJES
FOR EACH ROW
DECLARE

BEGIN
    IF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('DESTINO HA SIDO MODIFICADO');
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('DESTINO HA SIDO BORRADO');
    END IF;
END;
UPDATE VIAJES SET DESTINO='BARCELONA' WHERE DESTINO='MADRID';
UPDATE VIAJES SET TIPO='PRIVADO' WHERE TIPO='PUBLICO';
DELETE FROM VIAJES WHERE DESTINO='SORIA';
ALTER TRIGGER VALIDARDESTINO DISABLE;
-------
DROP TABLE CONDUCTOR_BORRADO;
CREATE TABLE CONDUCTOR_BORRADO(
    DNI VARCHAR2(9 BYTE),
    NOMBRE  VARCHAR2(40 BYTE),
    PRAPELLIDO  VARCHAR2(40 BYTE),
    SGAPELLIDO  VARCHAR2(30 BYTE),
    NUM_EMPLEADO    NUMBER(6,0)
)

CREATE OR REPLACE TRIGGER CONDUCTORES_BORRADOS
BEFORE DELETE ON CONDUCTOR
FOR EACH ROW
DECLARE

BEGIN
    INSERT INTO CONDUCTOR_BORRADO(DNI, NOMBRE, PRAPELLIDO, SGAPELLIDO,NUM_EMPLEADO) VALUES (:OLD.DNI, :OLD.NOMBRE, :OLD.PRAPELLIDO, :OLD.SGAPELLIDO, :OLD.NUM_EMPLEADO);
END;

DELETE FROM CONDUCTOR WHERE NOMBRE='MARCO';
ALTER TRIGGER CONDUCTORES_BORRADOS DISABLE;
------
CREATE OR REPLACE TRIGGER MODIFICARAUTOBUS
BEFORE INSERT OR UPDATE ON AUTOBUS
FOR EACH ROW
WHEN (NEW.NUM_PLAZAS>50)
DECLARE
    
BEGIN
    IF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('FILA MODIFICADA');
    ELSIF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('FILA INSERTADA');
    END IF;
END;

INSERT INTO AUTOBUS(MATRICULA, ANTIGUEDAD, FECHA_VALIDEZ_ITV, NUM_PLAZAS, PRECIO) VALUES('1236ABC',20,'12/12/29',55,800000);
INSERT INTO AUTOBUS(MATRICULA, ANTIGUEDAD, FECHA_VALIDEZ_ITV, NUM_PLAZAS, PRECIO) VALUES('1246ABC',20,'02/12/29',49,850000);
ALTER TRIGGER MODIFICARAUTOBUS DISABLE;
------------

CREATE OR REPLACE TRIGGER NUEVO
BEFORE UPDATE OF NUM_EMPLEADO ON CONDUCTOR
FOR EACH ROW
DECLARE

BEGIN
    IF :OLD.NUM_EMPLEADO=:NEW.NUM_EMPLEADO THEN
        DBMS_OUTPUT.PUT_LINE('ES IGUAL');
    ELSIF :OLD.NUM_EMPLEADO!=:NEW.NUM_EMPLEADO THEN
        DBMS_OUTPUT.PUT_LINE('FILA INSERTADA');
    END IF;
END;

UPDATE CONDUCTOR SET NUM_EMPLEADO='852967' WHERE NOMBRE='PEDRO';
ALTER TRIGGER NUEVO DISABLE;
-----------

CREATE OR REPLACE TRIGGER MODIFICAR
BEFORE UPDATE OF NUM_PLAZAS OR INSERT OR DELETE ON AUTOBUS
FOR EACH ROW
DECLARE

BEGIN
    IF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('ACTUALIZADO');
    ELSIF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('INSERTADO');
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('BORRADO');
    END IF;
END;

INSERT INTO AUTOBUS(MATRICULA, ANTIGUEDAD, FECHA_VALIDEZ_ITV, NUM_PLAZAS, PRECIO) VALUES('9236ABC',20,'12/12/99',99,800000);
UPDATE AUTOBUS SET NUM_PLAZAS='33' WHERE MATRICULA='9236ABC';
DELETE FROM AUTOBUS WHERE MATRICULA='9236ABC';

ALTER TRIGGER MODIFICAR DISABLE;
--------

--EJERCICIOS PROPUESTOS--

CREATE OR REPLACE PROCEDURE MOSTRAR_VALOR(i_dni IN VARCHAR2) IS
    vDni VARCHAR2(9):=i_dni;
BEGIN
    DBMS_OUTPUT.PUT_LINE('EL DNI ES: '||vDni);
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR DE PROCEDIMIENTO');
END;

CALL MOSTRAR_VALOR('45204004G');
--2--

CREATE OR REPLACE FUNCTION FUNCION2(NUMERO NUMBER, NUMERO2 NUMBER)RETURN NUMBER IS
    v_NUM NUMBER:=NUMERO;
    v_NUM2 NUMBER:=NUMERO2;
    v_SOLUCION NUMBER;
BEGIN
    v_SOLUCION:=v_NUM/v_NUM2;
    RETURN v_SOLUCION;
EXCEPTION
    WHEN ZERO_DIVIDE THEN
    RETURN -1;
END;

SELECT FUNCION2(5,0) FROM DUAL;

--3--

CREATE OR REPLACE PROCEDURE CADENA(i_FRASE IN VARCHAR2) IS
    vCADENA VARCHAR(100);
BEGIN
    FOR i IN REVERSE 1..LENGTH(i_FRASE) LOOP
        vCADENA := vCADENA || SUBSTR(i_FRASE,i,1);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(vCADENA);
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR DE PROCEDIMIENTO');
END;


CALL CADENA('hOLA');

--5--

DECLARE
    vNUM NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO vNUM
    FROM DEPARTAMENTO, DATOSPERSONALES

EXCEPTION
    
END;